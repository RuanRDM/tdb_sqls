Install.packages(”DBI”)
x<-1:
x
x<-1:
x
x<-1
x
x<-10
x
# a) Inicializa 2 variáveis e mostra a soma delas
var1 <- 10
var2 <- 5
soma <- var1 + var2
cat("Soma:", soma, "\n")
# b) Inicializa 2 variáveis e mostra a média delas
var3 <- 30
var4 <- 20
media <- (var3 + var4) / 2
cat("Média:", media, "\n")
# c) Cria um vetor x e inicializa com números de 1 a 20
x <- 1:20
# d) Concatenar o valor 50 ao final do vetor anterior
x <- c(x, 50)
# e) Crie uma matriz de 4 linhas e 10 colunas inicializada com valor 0
matriz <- matrix(0, nrow = 4, ncol = 10)
# Imprimir a matriz
print(matriz)
x <- c(x, 50)
cat("Vetor", x, "\n)
var1 <- 10
var2 <- 5
soma <- var1 + var2
cat("Soma:", soma, "\n")
var1 <- 10
var2 <- 5
soma <- var1 + var2
cat("Soma:", soma, "\n")
var3 <- 30
var4 <- 20
media <- (var3 + var4) / 2
cat("Média:", media, "\n")
x <- 1:20
# d) Concatenar o valor 50 ao final do vetor anterior
x <- c(x, 50)
cat("Vetor:", x, "\n)
vetor <- 1:20
cat("Vetor:", vetor, "\n)
cat("Vetor:", vetor, "\n")
cat("Vetor:", vetor, "\n")
vetor <- 1:20
cat("Vetor:", vetor, "\n")
cat("Vetor concatenado:", vetor, "\n")
vetor <- c(vetor, 50)
cat("Vetor concatenado:", vetor, "\n")
matriz <- matrix(0, nrow = 4, ncol = 10)
matriz
cat("Soma:", soma, "\n")
cat("Média:", media, "\n")
cat("Vetor:", vetor, "\n")
cat("Vetor concatenado:", vetor, "\n")
cat("Matriz:", matriz, "\n")
cat("Soma:", soma, "\n")
cat("Média:", media, "\n")
cat("Vetor:", vetor, "\n")
cat("Vetor concatenado:", vetor, "\n")
cat("Matriz: \n")
matriz
install.packages(“DBI")
install.packages(“DBI")
install.packages('DBI')
install.packages('RPostgres')
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user=”
con <- dbConnect(RPostgres::Postgres(),user=”
con <- dbConnect(RPostgres::Postgres(),user=”
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user=”
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres"",dbname="tdb"",
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres"",dbname="tdb"",
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres",dbname="tdb"",
host='localhos', port=5432)
sql = paste ("select * from state_raster;"")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres",dbname="tdb"",
host='localhos', port=5432)
sql = paste ("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres",dbname="tdb"",
host='localhos', port=5432)
sql = paste ("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
postgres",password="postgres",dbname="tdb"",
host='localhos', port=5432)
sql = paste (select * from state_raster;)
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),user="
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste (select * from state_raster;)
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste ("select * from state_raster;"")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste ("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste ("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("select * from state_raster")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
install.packages('DBI')
install.packages("DBI")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb"",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
## Grafico Bloxplot
boxplot(dados$tmin~dados$estacao,ylab="TMin
",xlab="Estacoes")
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("SELECT * from municipios;")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("select * from municipios;")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("select * from state_raster;")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("select * from municipios;")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
g <- function(x){
r <- x+1
return (r)
}
g(10)
## definindo o diretório de trabalho
setwd("C:\Users\20191pf.cc0202\Documents\tdb_sqls")
## definindo o diretório de trabalho
setwd("C:\Users\20191pf.cc0202\Documents\tdb_sqls")
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
## gerando um data.frame com dados aleatórios
dados <- gerarDados(10,3.5,128.9)
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aleatórios gerados com funções")
## gravando os dados gerados em um arquivo
gravarTabela(dados,"dados.csv")
dados <- gerarDados(10,3.5,128.9)
## Criando a imagem
png(filename="plot.png",width = 1024, height = 768)
## plotando um gráfico
plot(dados$y~dados$x, xlab='X', ylab='Y',
main="Dados aletatórios gerados com funções")
## liberando o arquivo criado
dev.off()
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("select * from municipios where id=1;")
rs = dbSendQuery(con,sql)
library(DBI)
library(RPostgres)
con <- dbConnect(RPostgres::Postgres(),
user="postgres",password="postgres",dbname="tdb",
host='localhost', port=5432)
sql = paste("select * from municipios where codigo=1;")
rs = dbSendQuery(con,sql)
df = dbFetch(rs)
dbClearResult(rs)
dbDisconnect(con)
df
consultaMunicipios()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
consultaMunicipios()
consultaMunicipios(2)
consultaMunicipios(2)
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
consultaMunicipios(2)
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaDatasets()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaDatasets()
criaGraficos()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaGraficos()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaGraficos()
## liberando o arquivo criado
dev.off()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaGraficos()
## definindo o diretório de trabalho
setwd("C:/Users/20191pf.cc0202/Documents/tdb_sqls")
## referenciando o arquivo com funções
source("functions.r")
criaGraficos()
# Ler os dados
dados <- read.table("dados_estacoes.csv", header=TRUE, sep=";")
# Criar subsets para tmin, tmax e precip para estação 49
subset_tmin_estacao49 <- subset(dados, estacao %in% c(49) & !is.na(tmin), select=c(estacao, data, tmin))
subset_tmax_estacao49 <- subset(dados, estacao %in% c(49) & !is.na(tmax), select=c(estacao, data, tmax))
subset_precip_estacao49 <- subset(dados, estacao %in% c(49) & precip > 0, select=c(estacao, data, precip))
# Criar subsets para tmin, tmax e precip para estação 213
subset_tmin_estacao213 <- subset(dados, estacao %in% c(213) & !is.na(tmin), select=c(estacao, data, tmin))
subset_tmax_estacao213 <- subset(dados, estacao %in% c(213) & !is.na(tmax), select=c(estacao, data, tmax))
subset_precip_estacao213 <- subset(dados, estacao %in% c(213) & precip > 0, select=c(estacao, data, precip))
png(filename="graficos.png",width = 1024, height = 768)
### Grafico 213
x<-seq(1:40)
y<-seq(1:40)
plot (x,y,type='n', xlab='Dias',
ylab='Temperatura (oC)/Precipitação', main="Passo Fundo")
points(subset_tmax_estacao213$tmax, col='blue', pch=19, lwd=8)
points(subset_tmin_estacao213$tmin, col='red', pch=19, lwd=8)
points(subset_precip_estacao213$precip , col='green', pch=19, lwd=8)
# Adiciona legenda ao gráfico
legend("topright", legend = c("Temperatura
Máxima","Temperatura Mínima", "Precipitação"),cex=0.5,
pch=c(19,19), col=c('blue','red', 'green'))
### Grafico 49
x<-seq(1:40)
y<-seq(1:40)
plot (x,y,type='n', xlab='Dias',
ylab='Temperatura (oC)/Precipitação', main="Passo Fundo")
points(subset_tmax_estacao49$tmax, col='blue', pch=19, lwd=8)
points(subset_tmin_estacao49$tmin, col='red', pch=19, lwd=8)
points(subset_precip_estacao49$precip , col='green', pch=19, lwd=8)
# Adiciona legenda ao gráfico
legend("topright", legend = c("Temperatura
Máxima","Temperatura Mínima", "Precipitação"),cex=0.5,
pch=c(19,19), col=c('blue','red', 'green'))
# Configurando o layout da janela gráfica
par(mfrow = c(linhas, colunas))
par(mfrow = c(linhas, colunas))
